import time
from telebot import TeleBot, types
from telethon import TelegramClient
from bs4 import BeautifulSoup
import lxml
from sqliter import Sqliter
import config
from urllib import parse
import requests
import os
from random import shuffle

bot = TeleBot(config.token)


def main():
    bot.polling()


@bot.message_handler(commands=['help'])
def help(message):
    '''
    –°–ø—Ä–∞–≤–∫–∞ –æ –±–æ—Ç–µ
    :param message:
    :return:
    '''
    bot.send_message(message.chat.id, '–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É IT –Ω–æ–≤–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –º–∏—Ä–µ IT')
    bot.send_message(message.chat.id,
                     '–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É Books, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ —è–∑—ã–∫–µ python –∏ —Å–∫–∞—á–∞—Ç—å –µ–µ –∑–∞ 1 –º–æ–Ω–µ—Ç—É')


@bot.message_handler(commands=["start"])
def inline(message):
    '''
    –ù–∞—á–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    :param message:
    :return:
    '''
    show_buttons(message.chat.id)

    data = Sqliter('db/quiz.sqlite', 'balance')
    data.create_user(message.chat.id)  # creating new user and putting him to db
    data.close()


@bot.callback_query_handler(func=lambda c: True)
def inline(x):
    '''
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    :param x:
    :return:
    '''
    if x.data == 'get_news':
        url = 'https://habr.com/ru/news/'
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'lxml')
        quotes = soup.find_all('a', class_='post__title_link')
        for i in quotes:
            bot.send_message(x.message.chat.id, f"[{i.text}]({i['href']})", parse_mode='Markdown',
                             disable_web_page_preview=True)
        show_buttons(x.message.chat.id)
    if x.data == 'quiz':
        data = Sqliter('db/quiz.sqlite', 'quiz')
        question = data.select_question(x.message.chat.id)
        data.close()
        with open(f'short_file_for_{x.message.chat.id}.txt', 'w') as file:
            file.write(str(question[0]))
        key = generate_markup(question[2], question[3])
        send = bot.send_message(x.message.chat.id, question[1], reply_markup=key)
        bot.register_next_step_handler(send, select_question)
    if x.data == 'book':
        data = Sqliter('db/quiz.sqlite', 'balance')
        balance = data.select_user(x.message.chat.id)
        if balance < 5:
            bot.send_message(x.message.chat.id,
                             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 5, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç')
            show_buttons(x.message.chat.id)
        else:
            send = bot.send_message(x.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä–∞ –Ω–∏–∂–µ:')
            bot.register_next_step_handler(send, searching_book)
        data.close()
    if x.data == 'balance':
        data = Sqliter('db/quiz.sqlite', 'balance')
        balance = data.select_user(x.message.chat.id)
        bot.send_message(x.message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}')
        show_buttons(x.message.chat.id)


def searching_book(message):
    '''
    –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –ø–æ –∞–≤—Ç–æ—Ä—É
    :param message:
    :return:
    '''
    bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... (–æ–∫–æ–ª–æ 3 –º–∏–Ω—É—Ç)')
    list_of_books = list()
    correct_list_of_books = list()
    for i in range(5):
        url = f'https://codernet.ru/books/python/?page={i + 1}'
        response_2 = requests.get(url)
        soup_2 = BeautifulSoup(response_2.text, 'lxml')
        quotes_2 = soup_2.find_all('li', class_='media')
        for i in quotes_2:
            list_of_books.append((i.a['title'], 'https://codernet.ru/' + i.a['href'][:-1]))
    f = False
    for j, i in enumerate(list_of_books):
        string = "%20".join(i[0].split()) + i[1][i[1].rfind('/'):] + ".pdf"
        href = parse.urljoin('https://codernet.ru/media/', string)
        try:
            res = requests.get(href.strip())
            if res.status_code != 404:
                correct_list_of_books.append((i[0], href))
        except Exception:
            print(f'{i[0]} ----—ç—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è')
    try:
        for j, i in enumerate(correct_list_of_books):
            if message.text.lower() in i[0].lower():
                f = True
                bot.send_message(message.chat.id, f'{j + 1}. {i[0]}')
        if not f:
            raise IOError
        send = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏')
        with open(f'short_file_for_{message.chat.id}.txt', 'w') as file:
            for i in correct_list_of_books:
                file.write('/////'.join(i) + '\n')
        bot.register_next_step_handler(send, choose_book)
    except IOError:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É')
        show_buttons(message.chat.id)


def choose_book(message):
    '''
    –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    :param message:
    :return:
    '''
    with open(f'short_file_for_{message.chat.id}.txt', 'r') as file:
        current_list = file.read().splitlines()
    os.remove(f'short_file_for_{message.chat.id}.txt')
    specified_number = int(message.text)
    href = current_list[specified_number].split('/////')[1]
    try:
        response = requests.get(href, stream=True)
        with open(f'output_for_{message.chat.id}.pdf', 'wb') as file:
            file.write(response.content)
            bot.send_document(message.chat.id, open(f'output_for_{message.chat.id}.pdf', 'rb'))
            data = Sqliter('db/quiz.sqlite', 'balance')
            data.bought_book(message.chat.id)
            data.close()
    except Exception:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∫–Ω–∏–≥–∏ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ (–±–æ–ª—å—à–µ 50 –º–±)')
    finally:
        if os.path.exists(f'output_for_{message.chat.id}.pdf'):
            os.remove(f'output_for_{message.chat.id}.pdf')
    show_buttons(message.chat.id)


def generate_markup(right_answer, wrong_answers):
    """
    –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    :param right_answer: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    :param wrong_answers: –ù–∞–±–æ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    :return: –û–±—ä–µ–∫—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    # –°–∫–ª–µ–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
    all_answers = '{};{}'.format(right_answer, wrong_answers)
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç (–º–∞—Å—Å–∏–≤) –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    list_items = []
    for item in all_answers.split(';'):
        list_items.append(item)
    # –•–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–µ—Ä–µ–º–µ—à–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –ø–µ—Ä–≤—ã–º
    shuffle(list_items)
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    for item in list_items:
        markup.add(item)
    return markup


def show_buttons(user_id):
    '''
    –í—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    :param user_id:
    :return:
    '''
    key = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton(text="IT –Ω–æ–≤–æ—Å—Ç–∏ üìÉ", callback_data="get_news")
    but_2 = types.InlineKeyboardButton(text="Books üìñ", callback_data="book")
    but_3 = types.InlineKeyboardButton(text="Random Quiz ‚ùì", callback_data="quiz")
    but_4 = types.InlineKeyboardButton(text='Balance üí≥', callback_data='balance')
    key.add(but_1, but_2, but_3, but_4)
    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å', reply_markup=key)


def select_question(message):
    with open(f'short_file_for_{message.chat.id}.txt') as file:
        res = file.read().splitlines()
    os.remove(f'short_file_for_{message.chat.id}.txt')
    data = Sqliter('db/quiz.sqlite', 'quiz')
    question = data.select_current_question(int(res[0]))
    if message.text == question[2]:
        data.update_balance(message.chat.id)
        bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è')
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å :(')
    data.close()

    # if message.text ==


if __name__ == '__main__':
    main()
